from simulator import *
from example_nfa import *

def test_even_0_or_1():
    tts = [
        ("(1 [(e/2 [(0/3 [(0/2 [(0/3 [(1/3 [No])])])])])(e/4 [(0/4 [(0/4 [(0/4 [(1/5 [No])])])])])])", "0001"),
        ("(1 [(e/2 [(0/3 [(0/2 [(0/3 [No])])])])(e/4 [(0/4 [(0/4 [(0/4 [Yes])])])])])", "000"),
        ("(1 [(e/2 [(0/3 [(0/2 [Yes])])])(e/4 [(0/4 [(0/4 [Yes])])])])", "00"),
        ("(1 [(e/2 [(0/3 [No])])(e/4 [(0/4 [Yes])])])", "0"),
        ("(1 [(e/2 [(1/2 [Yes])])(e/4 [(1/5 [No])])])", "1"),
        ("(1 [(e/2 [(1/2 [(1/2 [Yes])])])(e/4 [(1/5 [(1/4 [Yes])])])])", "11"),
    ]
    for tt in tts:
        assert tt[0] == even_0_or_1.fork(tt[1])

def test_ends_in_1():
    tts = [
        ("(1 [(0/1 [(0/1 [(0/1 [(1/1 [No])(1/2 [Yes])])])])])", "0001"),
        ("(1 [(0/1 [(0/1 [(0/1 [(0/1 [No])])])])])", "0000"),
        ("(1 [(0/1 [(0/1 [(1/1 [No])(1/2 [Yes])])])])", "001"),
        ("(1 [(0/1 [(0/1 [(0/1 [No])])])])", "000"),
        ("(1 [(0/1 [(1/1 [No])(1/2 [Yes])])])", "01"),
        ("(1 [(1/1 [No])(1/2 [Yes])])", "1"),
    ]
    for tt in tts:
        assert tt[0] == ends_in_1.fork(tt[1])

def test_ends_in_0():
    tts = [
        ("(1 [(0/1 [(0/1 [(0/1 [(0/1 [No])(0/2 [Yes])])(0/2 [])])(0/2 [])])(0/2 [])])", "0000"),
        ("(1 [(0/1 [(0/1 [(0/1 [(1/1 [No])])(0/2 [])])(0/2 [])])(0/2 [])])", "0001"),
        ("(1 [(0/1 [(0/1 [(0/1 [No])(0/2 [Yes])])(0/2 [])])(0/2 [])])", "000"),
        ("(1 [(0/1 [(0/1 [(1/1 [No])])(0/2 [])])(0/2 [])])", "001"),
        ("(1 [(0/1 [(0/1 [No])(0/2 [Yes])])(0/2 [])])", "00"),
        ("(1 [(0/1 [No])(0/2 [Yes])])", "0"),
    ]
    for tt in tts:
        assert tt[0] == ends_in_0.fork(tt[1])

def test_substring_101():
    tts = [
        ("(1 [(0/1 [(1/1 [(0/1 [(1/1 [No])(1/2 [No])])])(1/2 [(0/3 [(1/4 [Yes])])])])])", "0101"),
        ("(1 [(0/1 [(1/1 [(0/1 [No])])(1/2 [(0/3 [No])])])])", "010"),
        ("(1 [(1/1 [(0/1 [(1/1 [No])(1/2 [No])])])(1/2 [(0/3 [(1/4 [Yes])])])])", "101"),
        ("(1 [(0/1 [(1/1 [(0/1 [No])])(1/2 [(0/3 [No])])])])", "010"),
        ("(1 [(1/1 [(0/1 [No])])(1/2 [(0/3 [No])])])", "10"),
        ("(1 [(1/1 [No])(1/2 [No])])", "1"),
    ]
    for tt in tts:
        assert tt[0] == substring_101.fork(tt[1])

def test_ends_with_01():
    tts = [
        ("(1 [(0/1 [(1/1 [(0/1 [(1/1 [No])])(0/2 [(1/3 [Yes])])])])(0/2 [(1/3 [])])])", "0101"),
        ("(1 [(0/1 [(1/1 [(0/1 [No])(0/2 [No])])])(0/2 [(1/3 [])])])", "010"),
        ("(1 [(1/1 [(0/1 [(1/1 [No])])(0/2 [(1/3 [Yes])])])])", "101"),
        ("(1 [(0/1 [(1/1 [(0/1 [No])(0/2 [No])])])(0/2 [(1/3 [])])])", "010"),
        ("(1 [(1/1 [(0/1 [No])(0/2 [No])])])", "10"),
        ("(1 [(1/1 [No])])", "1"),
    ]
    for tt in tts:
        assert tt[0] == ends_with_01.fork(tt[1])

def test_oneone():
    tts = [
        ("(1 [])", "00111"),
        ("(1 [(1/2 [(e/5 [])(1/3 [])(1/4 [(0/4 [(0/4 [(0/4 [Yes])])])])])(1/5 [])])", "11000"),
        ("(1 [(1/2 [(e/5 [])(1/3 [(1/3 [Yes])])(1/4 [])])(1/5 [])])", "111"),
        ("(1 [(1/2 [(e/5 [])(1/3 [Yes])(1/4 [Yes])])(1/5 [])])", "11"),
        ("(1 [])", "0"),
        ("(1 [(1/2 [(e/5 [Yes])No])(1/5 [Yes])])", "1"),
    ]
    for tt in tts:
        assert tt[0] == oneone.fork(tt[1])

def test_double1_0():
    tts = [
        ("(1 [(1/1 [(1/1 [(1/1 [(1/1 [(1/1 [No])(1/2 [No])])(1/2 [(1/3 [No])])])(1/2 [(1/3 [])])])(1/2 [(1/3 [])])])(1/2 [(1/3 [])])])", "11111"),
        ("(1 [(1/1 [(1/1 [(0/1 [(0/1 [(0/1 [No])])])])(1/2 [])])(1/2 [(1/3 [(0/4 [(0/5 [(0/5 [Yes])])])])])])", "11000"),
        ("(1 [(1/1 [(1/1 [No])(1/2 [No])])(1/2 [(1/3 [No])])])", "11"),
        ("(1 [(1/1 [(1/1 [(0/1 [(0/1 [No])])])(1/2 [])])(1/2 [(1/3 [(0/4 [(0/5 [Yes])])])])])", "1100"),
        ("(1 [(0/1 [(0/1 [(1/1 [(1/1 [No])(1/2 [No])])(1/2 [(1/3 [No])])])])])", "0011"),
        ("(1 [(1/1 [No])(1/2 [No])])", "1"),
    ]
    for tt in tts:
        assert tt[0] == double1_0.fork(tt[1])

def test_zero_or_one():
    tts = [
        ("(1 [(e/2 [(1/2 [(1/2 [(1/2 [(1/2 [(1/2 [No])])])])])])(1/5 [(1/6 [])])])", "11111"),
        ("(1 [(e/2 [(1/2 [(1/2 [(0/2 [(0/2 [(0/2 [No])(0/3 [No])])(0/3 [(0/4 [Yes])])])(0/3 [(0/4 [(0/4 [Yes])])])])])])(1/5 [(1/6 [(0/6 [(0/6 [(0/6 [Yes])])])])])])", "11000"),
        ("(1 [(e/2 [(1/2 [(1/2 [No])])])(1/5 [(1/6 [Yes])])])", "11"),
        ("(1 [(e/2 [(1/2 [(1/2 [(0/2 [(0/2 [No])(0/3 [No])])(0/3 [(0/4 [Yes])])])])])(1/5 [(1/6 [(0/6 [(0/6 [Yes])])])])])", "1100"),
        ("(1 [(e/2 [(0/2 [(0/2 [(1/2 [(1/2 [No])])])(0/3 [(1/3 [(1/3 [No])])])])(0/3 [(0/4 [(1/4 [(1/4 [Yes])])])])])(0/1 [(e/2 [(0/2 [(1/2 [(1/2 [No])])])(0/3 [(1/3 [(1/3 [No])])])])(0/1 [(e/2 [(1/2 [(1/2 [No])])])(1/5 [(1/6 [Yes])])])(0/2 [(1/2 [(1/2 [No])])])])(0/2 [(0/2 [(1/2 [(1/2 [No])])])(0/3 [(1/3 [(1/3 [No])])])])])", "0011"),
        ("(1 [(e/2 [(1/2 [No])])(1/5 [No])])", "1"),
    ]
    for tt in tts:
        assert tt[0] == zero_or_one.fork(tt[1])

def test_third_from_last_is_0():
    tts = [
        ("(1 [(1/1 [(1/1 [(0/1 [(1/1 [(1/1 [No])])])(0/2 [(1/3 [(1/4 [Yes])])])])])])", "11011"),
        ("(1 [(1/1 [(1/1 [(0/1 [(0/1 [(0/1 [No])(0/2 [No])])(0/2 [(0/3 [No])])])(0/2 [(0/3 [(0/4 [Yes])])])])])])", "11000"),
        ("(1 [(1/1 [(1/1 [No])])])", "11"),
        ("(1 [(1/1 [(1/1 [(0/1 [(0/1 [No])(0/2 [No])])(0/2 [(0/3 [No])])])])])", "1100"),
        ("(1 [(0/1 [(0/1 [(1/1 [(1/1 [No])])])(0/2 [(1/3 [(1/4 [Yes])])])])(0/2 [(0/3 [(1/4 [])])])])", "0011"),
        ("(1 [(1/1 [No])])", "1"),
    ]
    for tt in tts:
        assert tt[0] == third_from_last_is_0.fork(tt[1])

def test_ends_in_a():
    tts = [
        ("(1 [(a/1 [(a/1 [(a/1 [(b/1 [(c/1 [No])])])(a/2 [])])(a/2 [])])(a/2 [])])", "aaabc"),
        ("(1 [(a/1 [(b/1 [(c/1 [(a/1 [No])(a/2 [Yes])])])])(a/2 [])])", "abca"),
        ("(1 [(a/1 [No])(a/2 [Yes])])", "a"),
        ("(1 [(a/1 [(a/1 [No])(a/2 [Yes])])(a/2 [])])", "aa"),
        ("(1 [(c/1 [(b/1 [(a/1 [No])(a/2 [Yes])])])])", "cba"),
        ("(1 [(c/1 [No])])", "c"),
    ]
    for tt in tts:
        assert tt[0] == ends_in_a.fork(tt[1])