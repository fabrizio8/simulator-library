import pytest
from simulator import *
from example_nfa import *

def test_even_0_or_1():
    traces = [
              ([(None, 4), ('1', 5), ('0', 5), ('0', 5), ('0', 5), ('1', 4)],True),
              ([(None, 4), ('1', 5), ('0', 5), ('1', 4), ('0', 4), ('1', 5)],True),
              ([(None, 4)], True),
              ([(None, 4)], True),
              ([(None, 2)],True),
              ([(None, 2)],True),
              ([(None, 2), ('1', 4)],False),
              ([(None, 2), ('1', 6)],False),
              ([(None, 4), ('1', 3)], False),
              ([(None, 2), ('0', 5)], False),
              ([(None, 2), ('1', 5), ('0', 5), ('0', 5), ('1', 4)], False),
              ([(None, 4), ('1', 5), ('0', 5), ('1', 5), ('0', 5), ('1', 5)],False),
            ]
    for trace in traces:
        assert even_0_or_1.oracle(*trace)

def test_ends_in_1():
    traces = [
              ([('1', 1), ('1', 1), ('0', 1), ('0', 1), ('0', 1), ('1', 2)],True),
              ([('1', 1), ('1', 1), ('0', 1), ('0', 1), ('0', 1), ('1', 1)],True),
              ([('1', 1), ('1', 1), ('0', 1), ('0', 1), ('0', 1)],True),
              ([('1', 1), ('1', 1), ('0', 1), ('0', 1)],True),
              ([('1', 1)],True),
              ([('0', 1)],True),
              ([('0', 2)],False),
              ([('1', 1), ('1', 1),('0', 2)],False),
              ([('1', 1), ('1', 1), ('0', 1), ('0', 2)],False),
              ([('1', 1), ('1', 1), ('0', 1), ('0', 2), ('0', 3)],False),
              ([('1', 1), ('1', 1), ('0', 1), ('0', 1), ('0', 1), ('0', 2)],False),
              ([('1', 1), ('1', 1), ('0', 1), ('0', 1), ('0', 1), ('0', 3)],False),
            ]
    for trace in traces:
        assert ends_in_1.oracle(*trace)

def test_subtring_101():
    traces = [
              ([('1', 2), ('1', 2), ('1', 2), ('1', 2), ('1', 2), ('1', 2)],True),
              ([('0', 1), ('0', 1), ('0', 1), ('0', 1), ('0', 1)],True),
              ([('1', 2), ('1', 2), ('1', 2), ('0', 3)],True),
              ([('1', 1), ('1', 1), ('0', 1)],True),
              ([('1', 1)],True),
              ([('0', 1)],True),
              ([('0', 2)],False),
              ([('1', 1), ('1', 1),('0', 2)],False),
              ([('1', 1), ('1', 1), ('0', 1), ('0', 2)],False),
              ([('1', 1), ('1', 1), ('0', 1), ('0', 2), ('0', 3)],False),
              ([('1', 1), ('1', 1), ('0', 1), ('0', 1), ('0', 1), ('0', 2)],False),
              ([('1', 1), ('1', 1), ('0', 1), ('0', 1), ('0', 1), ('0', 3)],False),
            ]
    for trace in traces:
        assert substring_101.oracle(*trace)

def test_one():
    traces = [
              ([('1', 2), ('1', 3), ('1', 3), ('1', 3), ('1', 3), ('1', 3)],True),
              ([('1', 2), ('1', 4), ('0', 4), ('0', 4)],True),
              ([('1', 2), ('1', 3), ('1', 3)],True),
              ([('1', 2), ('1', 4), ('0', 4)],True),
              ([('1', 2), ('1', 3), ('1', 3)],True),
              ([('1', 2)],True),
              ([('0', 2)],False),
              ([('1', 2), ('1', 3), ('0', 3)],False),
              ([('1', 2), ('1', 3), ('0', 4), ('0', 4)],False),
              ([('0', 2), ('0', 1), ('0', 1), ('0', 1), ('0', 1)],False),
              ([('1', 2), ('1', 4), ('0', 1), ('0', 1), ('0', 1), ('0', 2)],False),
              ([('1', 2), ('1', 3), ('0', 3), ('0', 3), ('0', 3), ('0', 3)],False),
            ]
    for trace in traces:
        assert one.oracle(*trace)

# accepts strings that contain at least two 0s or exactly two 1s
def test_zero_or_one():
    traces = [
              ([('1', 5), ('0', 5), ('0', 5), ('0', 5), ('0', 5), ('1', 6)],True),
              ([('1', 5), ('0', 5), ('0', 5), ('0', 5), ('1', 6), ('0', 6)],True),
              ([(None, 2), ('0', 3), ('0', 4)],True),
              ([(None, 2), ('1', 2), ('0', 3)],True),
              ([(None, 2)],True),
              ([('1', 5)],True),
              ([('0', 2)],False),
              ([('1', 2), ('1', 3), ('0', 3)],False),
              ([('1', 2), ('1', 3), ('0', 4), ('0', 4)],False),
              ([(None, 2), ('0', 1), ('0', 1), ('0', 1), ('0', 1)],False),
              ([(None, 2), ('1', 4), ('0', 1), ('0', 1), ('0', 1), ('0', 2)],False),
              ([(None, 2), ('1', 3), ('0', 3), ('0', 3), ('0', 3), ('0', 3)],False),
            ]
    for trace in traces:
        assert zero_or_one.oracle(*trace)