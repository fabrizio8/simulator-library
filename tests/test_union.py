from simulator import *
from example_dfa import *

def test_union_even_and_my_name():
    dfa_u = union(even_chars, my_name)
    assert accepted(dfa_u, [1,2,3,4,5,6], trace=True)
    assert accepted(dfa_u, [], trace=True)
    assert accepted(dfa_u, [1,2], trace=True)
    assert accepted(dfa_u, list("FABRIZIO"), trace=True)
    assert accepted(dfa_u, list("FABRIZIOFABRIZIO"), trace=True)
    assert accepted(dfa_u, list("FABRIZIOFABRIZIOFABRIZIO"), trace=True)
    assert accepted(dfa_u, list("fabrizio"), trace=True)
    assert accepted(dfa_u, list("FABRIZIOFABR"), trace=True)
    assert not accepted(dfa_u, [1], trace=True)
    assert not accepted(dfa_u, list("not my name"), trace=True)
    assert not accepted(dfa_u, list("Fab"), trace=True)
    assert not accepted(dfa_u, list("0"), trace=True)
    assert not accepted(dfa_u, list("Dj Hi-Tek"), trace=True)
    assert not accepted(dfa_u, list("Fabri"), trace=True)

def test_even_chars_and_divisible_by_3():
    dfa_u = union(even_chars, divisible_by_3)
    assert accepted(dfa_u, ['1','2','3','4','5','6'], trace=True)
    assert accepted(dfa_u, [], trace=True)
    assert accepted(dfa_u, ['1','2'], trace=True)
    assert accepted(dfa_u, str(654321), trace=True)
    assert accepted(dfa_u, [], trace=True)
    assert accepted(dfa_u, str(543210), trace=True)
    assert not accepted(dfa_u, '2', trace=True)
    assert not accepted(dfa_u, '7', trace=True)
    assert not accepted(dfa_u, ['1','2','3','4','7'], trace=True)
    assert not accepted(dfa_u, '5', trace=True)
    assert not accepted(dfa_u, list(range(7)), trace=True)
    assert not accepted(dfa_u, '1', trace=True)

def test_traffic_light_and_substring101():
    dfa_u = union(traffic_light, substring_101)
    assert accepted(dfa_u, [0, 0, 0, 0, 1, 1, 1, 2, 1, 0, 0, 0] , trace=True)
    assert accepted(dfa_u, [0, 0, 0, 0, 1, 1, 1, 2, 1] , trace=True)
    assert accepted(dfa_u, [0, 0, 0, 0, 1, 1, 1, 2, 1, 0, 0, 0,1,2] , trace=True)
    assert not accepted(dfa_u, [0, 0, 0, 0, 1, 1, 1, 2] , trace=True)
    assert not accepted(dfa_u, [1, 1, 2, 2], trace=True)
    assert not accepted(dfa_u, [0]*2000, trace=True)
    assert accepted(dfa_u, [1, 0, 1], trace=True)
    assert accepted(dfa_u, [1, 0, 1] + [1, 0]*10, trace=True)
    assert accepted(dfa_u, [0] * 10 + [1, 0, 1], trace=True)
    assert not accepted(dfa_u, [], trace=True)
    assert accepted(dfa_u, [1, 0], trace=True)
    assert accepted(dfa_u, [1, 1, 1, 0, 1], trace=True)

def test_traffic_light_and_all_1s():
    dfa_u = union(traffic_light, binary_string_all_1)
    assert accepted(dfa_u, [0, 0, 0, 0, 1, 1, 1, 2, 1, 0, 0, 0] , trace=True)
    assert accepted(dfa_u, [0, 0, 0, 0, 1, 1, 1, 2, 1] , trace=True)
    assert accepted(dfa_u, [0, 0, 0, 0, 1, 1, 1, 2, 1, 0, 0, 0,1,2] , trace=True)
    assert accepted(dfa_u, [0, 1], trace=True)
    assert not accepted(dfa_u, [0, 0, 0, 0, 1, 1, 1, 2] , trace=True)
    assert not accepted(dfa_u, [1, 1, 2, 2], trace=True)
    assert not accepted(dfa_u, [0]*2000, trace=True)
    assert accepted(dfa_u, [1,1,1,1,1,1,1,1], trace=True)
    assert accepted(dfa_u, [1]*25, trace=True)
    assert accepted(dfa_u, [1], trace=True)
    assert not accepted(dfa_u, [], trace=True)
    assert not accepted(dfa_u, [1]*5 + [0,2], trace=True)


def test_substring_101_and_strictly_alternating():
    dfa_u = union(substring_101, strictly_alternating)
    assert accepted(dfa_u, [1, 0, 1], trace=True)
    assert accepted(dfa_u, [1, 0, 1] + [1, 0]*10, trace=True)
    assert accepted(dfa_u, [0] * 10 + [1, 0, 1], trace=True)
    assert not accepted(dfa_u, [], trace=True)
    assert accepted(dfa_u, [1, 0], trace=True)
    assert not accepted(dfa_u, [1, 1, 1, 0, 0, 0, 1], trace=True)
    assert accepted(dfa_u, [1, 0] * 5, trace=True)
    assert accepted(dfa_u, [1, 0, 1, 0, 1, 0, 1, 0, 1, 0], trace=True)
    assert accepted(dfa_u, [1, 0], trace=True)
    assert not accepted(dfa_u, [], trace=True)
    assert not accepted(dfa_u, [1, 1], trace=True)
    assert accepted(dfa_u, [1, 0, 1], trace=True)


def test_divisible_by_3_and_first_last_x():
    dfa_u = union(divisible_by_3, first_and_last_char_is_x)
    assert accepted(dfa_u, '33', trace=True)
    assert accepted(dfa_u, ['1','5'], trace=True)
    assert accepted(dfa_u, ['1','2'], trace=True)
    assert accepted(dfa_u, 'x', trace=True)
    assert accepted(dfa_u, list('xx'), trace=True)
    assert accepted(dfa_u, [], trace=True)
    assert not accepted(dfa_u, ['5', '1', '0', '1'], trace=True)
    assert not accepted(dfa_u, list(str(23)), trace=True)
    assert not accepted(dfa_u, list(str(10)), trace=True)
    assert not accepted(dfa_u, str(14), trace=True)
    assert not accepted(dfa_u, str(26), trace=True)
    assert not accepted(dfa_u, str(103), trace=True)

def test_string_all_1_and_strictly_alternating():
    dfa_u = union(binary_string_all_1, strictly_alternating) 
    assert accepted(dfa_u, [1,1,1,1,1,1,1,1], trace=True)
    assert accepted(dfa_u, [1]*25, trace=True)
    assert accepted(dfa_u, [1], trace=True)
    assert not accepted(dfa_u, [], trace=True)
    assert not accepted(dfa_u, [0, 1], trace=True)
    assert not accepted(dfa_u, [1]*5 + [0], trace=True)
    assert accepted(dfa_u, [1, 0] * 5, trace=True)
    assert accepted(dfa_u, [1, 0, 1, 0, 1, 0, 1, 0, 1, 0], trace=True)
    assert accepted(dfa_u, [1, 0], trace=True)
    assert not accepted(dfa_u, [], trace=True)
    assert not accepted(dfa_u, [1, 2], trace=True)
    assert not accepted(dfa_u, [1, 0, 1], trace=True)

def test_at_least_3_and_is_weekend():
    dfa_u = union(at_least_3, is_weekend)
    assert accepted(dfa_u, list("onetwothree"), trace=True)
    assert accepted(dfa_u, [1, 2, 3], trace=True)
    assert accepted(dfa_u, ["hello", "my", "name", "is", "three"], trace=True)
    assert not accepted(dfa_u, [], trace=True)
    assert not accepted(dfa_u, [1], trace=True)
    assert not accepted(dfa_u, [1, 2], trace=True)
    assert accepted(dfa_u, ["Saturday"], trace=True)
    assert accepted(dfa_u, ["Saturday", "Sunday"], trace=True)
    assert accepted(dfa_u, ["Sunday"], trace=True)
    assert not accepted(dfa_u, [], trace=True)
    assert not accepted(dfa_u, ["Monday"], trace=True)
    assert accepted(dfa_u, ["Monday", "Tuesday", "Wednesday"] * 3, trace=True)

def test_at_least_3_and_loooong():
    dfa_u = union(at_least_3, loooong)
    assert accepted(dfa_u, list("onetwothree"), trace=True)
    assert accepted(dfa_u, [1, 2, 3], trace=True)
    assert not accepted(dfa_u, list("sm"), trace=True)
    assert not accepted(dfa_u, [], trace=True)
    assert not accepted(dfa_u, [1], trace=True)
    assert not accepted(dfa_u, [1, 2], trace=True)
    assert accepted(dfa_u, list("lo0o0o0o0o0ong"), trace=True)
    assert accepted(dfa_u, list("lOOOOOOOOOO000000000o0o0o0o0o0ng"), trace=True)
    assert accepted(dfa_u, list("long"), trace=True)
    assert accepted(dfa_u, list("short"), trace=True)
    assert accepted(dfa_u, list("smol"), trace=True)
    assert accepted(dfa_u, list("MINISCULE"), trace=True)

def test_at_least_3_and_all_1():
    dfa_u = union(at_least_3, binary_string_all_1)
    assert accepted(dfa_u, [1,1,1,1,1,1,1,1], trace=True)
    assert accepted(dfa_u, [1]*25, trace=True)
    assert accepted(dfa_u, [1], trace=True)
    assert not accepted(dfa_u, [], trace=True)
    assert not accepted(dfa_u, [0, 1], trace=True)
    assert not accepted(dfa_u, [2]*2, trace=True)
    assert accepted(dfa_u, list("onetwothree"), trace=True)
    assert accepted(dfa_u, [1, 2, 3], trace=True)
    assert accepted(dfa_u, ["hello", "my", "name", "is", "three"], trace=True)
    assert not accepted(dfa_u, [], trace=True)
    assert not accepted(dfa_u, [3], trace=True)
    assert not accepted(dfa_u, [1, 2], trace=True)


def test_capitalized_and_loooong():
    dfa_u = union(capitalized_first_letter_only, loooong)
    assert accepted(dfa_u, list("Long"), trace=True)
    assert accepted(dfa_u, list("Lamb"), trace=True)
    assert accepted(dfa_u, list("Looooongg"), trace=True)
    assert not accepted(dfa_u, list("AA"), trace=True)
    assert not accepted(dfa_u, list("aaaaaaT"), trace=True)
    assert not accepted(dfa_u, list("AmericA"), trace=True)
    assert accepted(dfa_u, list("lo0o0o0o0o0ong"), trace=True)
    assert accepted(dfa_u, list("lOOOOOOOOOO000000000o0o0o0o0o0ng"), trace=True)
    assert accepted(dfa_u, list("long"), trace=True)
    assert not accepted(dfa_u, list("ShorT"), trace=True)
    assert not accepted(dfa_u, list("smol"), trace=True)
    assert not accepted(dfa_u, list("MINISCULE"), trace=True)

def test_capitalized_and_my_name():
    dfa_u = union(capitalized_first_letter_only, my_name)
    assert accepted(dfa_u, list("Matthew"), trace=True)
    assert accepted(dfa_u, list("Fabrizio"), trace=True)
    assert accepted(dfa_u, list("A"), trace=True)
    assert not accepted(dfa_u, list("AA"), trace=True)
    assert not accepted(dfa_u, list("aaaaaaT"), trace=True)
    assert not accepted(dfa_u, list("AmericA"), trace=True)
    assert accepted(dfa_u, list("FABRIZIO"), trace=True)
    assert accepted(dfa_u, list("FABRIZIOFABRIZIO"), trace=True)
    assert accepted(dfa_u, list("FABRIZIOFABRIZIOFABRIZIO"), trace=True)
    assert not accepted(dfa_u, list("fabrizio"), trace=True)
    assert not accepted(dfa_u, list("FABRIZIOFABR"), trace=True)
    assert not accepted(dfa_u, list("not my name"), trace=True)



